import{_ as s,c as a,a as p,o as t}from"./app-BNVlJuRu.js";const e={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h2 id="泛型-通配符" tabindex="-1"><a class="header-anchor" href="#泛型-通配符"><span>泛型 &amp; 通配符</span></a></h2><h3 id="什么是泛型-有什么作用" tabindex="-1"><a class="header-anchor" href="#什么是泛型-有什么作用"><span>什么是泛型，有什么作用?</span></a></h3><p>问题引入:</p><p>一般的类和方法，只能使用具体的类型：要么是基本类型，要么是自定义的类。如果要编写可以应用于多种类型的代码，这种刻板的限制对代码的束缚就会很大。</p><p>泛型的本质是 <strong>类型参数化</strong> ，在不创建新的类型的情况下，通过<strong>泛型指定的不同类型来控制形参具体限制的类型</strong> 举个简单的例子</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArrays<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> intArray <span class="token operator">:</span> intArrays<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArrays<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> stringArray <span class="token operator">:</span> stringArrays<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printObject</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tArrays<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> tArray <span class="token operator">:</span> tArrays<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const o=s(e,[["render",c],["__file","java.html.vue"]]),u=JSON.parse('{"path":"/backend/java.html","title":"Java","lang":"zn-ch","frontmatter":{},"headers":[{"level":2,"title":"泛型 & 通配符","slug":"泛型-通配符","link":"#泛型-通配符","children":[{"level":3,"title":"什么是泛型，有什么作用?","slug":"什么是泛型-有什么作用","link":"#什么是泛型-有什么作用","children":[]}]}],"git":{"updatedTime":1743141207000,"contributors":[{"name":"晴为镜","username":"","email":"11961954+hlknb123@user.noreply.gitee.com","commits":1}],"changelog":[{"hash":"cb9da5f54d5579a92ecc97c8cfcecd62e0995c14","time":1743141207000,"email":"11961954+hlknb123@user.noreply.gitee.com","author":"晴为镜","message":"markdown的语法介绍补充"}]},"filePathRelative":"backend/java.md"}');export{o as comp,u as data};
